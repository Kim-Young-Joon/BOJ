순회 종류
    전위 순회 : 부모 -> 왼쪽 자식 -> 오른쪽 자식 순서
    중위 순회 : 왼쪽 자식 -> 부모 -> 오른쪽 자식
    후위 순회 : 왼쪽 자식 -> 오른쪽 자식 -> 부모

** 메모이제이션 활용하면 메모리 사용량과 처리 시간을 줄일 수 있다.
    (이미 계산한 값에 대해서 특정 공간(배열 등)에 저장하므로써
    이후에 같은 값을 불러오고자 할 때 추가적인 연산을 거치지 않고
    불러오는 것이 가능해짐)

DFS (Depth First Search) : 깊이 우선 탐색
    - 일반적으로 경로 탐색에 사용

BFS (Breadth First Search) : 넓이 우선 탐색
    - 일반적으로 그래프의 최단 거리를 찾는데 사용

그래프와 인접 행렬
    1. 무방향 그래프
        - 간선 정보를 보통 2차원 배열로 표현 함 (연결 지점에 대해서 1 과 같은 정수로 변경해 줌)
        - 양방향이 모두 가능하기 때문에 (2, 5) 에 대한 정보가 입력으로 들어오면 (5, 2) 역시 동일하게 표기
        - 위와 같은 과정으로 2차원 배열을 구성해두게 되면, 2차원 배열만으로도 그래프의 모양을 추측할 수 있음
    2. 방향 그래프
        - 이동하는 방향이 있는 그래프
        - 양방향이 불가능하기 때문에 (2, 5) 에 대한 정보가 입력으로 들어오게 되면 (2, 5) 만 표기
    3. 가중치 방향 그래프
        - 방향 그래프 + 이동하는데 가중치가 포함된 그래프
        - 이동하는데 비용이 든다고 생각하면 됨
        - 위 두가지의 그래프는 이동 가능한 경우에 1 로 표현했다면, 가중치 그래프의 경우 해당 가중치로
            표현하면 됨 ( 0 인 경우 이동불가, 양의 정수면 이동가능 + 특정 가중치가 표현되어 있음)
    * 그래프에서 경로는 한 번 방문한 노드는 재방문 하면 안된다.
        - 방문한 노드를 체크할 수 있는 별도의 배열을 이용하면 편리

인접 리스트
    - 정점의 개수가 많은 경우, 인접 행렬로 처리하려고 하면 메모리 낭비가 심해지고 시간 복잡도 측면에서도 좋지 않음
    - 이런 경우에는 ArrayList 를 이용해서 처리하면 좋음
    - 인접 행렬과 같이 1 이라는 정수로 이동 가능한지를 표현하는 것이 아니라, ArrayList 에 포함되어 있는 경우라면
        이동 가능하다고 판단하고 수행

