선택 정렬
    for 문 돌면서 가장 작은 수가 저장되어 있는 index 확인
    for 문 맨 앞을 가리키는 (i) index 와 교체

버블 정렬
    이웃해 있는 두 수를 비교해서 큰 수를 뒤로 보냄
    가장 큰 수부터 맨 마지막 index 에서 부터 차례로 정렬되서 내려옴

삽입 정렬
    두 번째 자료부터 시작해서 그 앞의 자료들과 비교하여 삽일할 위치를 지정
    자료를 뒤로 옮기고 지정한 자리에 자료를 삽입하여 정렬

Comparable interface 구현
    compareTo method override
    음수 값 리턴 : 오름차순 정렬
    양수 값 리턴 : 내림차순 정렬
    Collections.sort 를 하게 되면 compareTo 에서 구현한 것을 기준으로 정렬됨

이분 검색
    전제 조건은 정렬되어 있는 상태, mid = (lt + rt) / 2
    정렬이 되어 있는 상태에서 mid index 에 위치한 값을 기준으로
    찾고자 하는 값이 작으면 왼편, 크면 오른편을 기준으로 탐색
    - 작은 경우에는 rt 값을 mid - 1 로 변경
    - 클 경우에는 lt 값을 mid + 1 로 변경
    - 찾고자 하는 값과 같은 경우 mid 가 가리키는 index

알아두면 유용
    배열의 최대값(최소값) 구하기 - for문 쓰지 않고
        Arrays.stream(arr).max().getAsInt();
        - 최소값을 구하고자 하면, max 대신 min
            -> 모든 요소의 합을 구하고자 하면 sum (sum 은 뒤에 getAsInt 를 붙일 필요가 없음)
        - 자료형이 int 가 아닌 다른 수면 getAs 뒤에 해당 자료형 붙이기
